#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift __dir__ + '/../../lib'
require 'dry/cli'
require_relative 'shared_commands'

module Foo
  module CLI
    module Commands
      extend Dry::CLI::Registry
    end
  end
end

Foo::CLI::Commands.register 'assets precompile', Commands::Assets::Precompile
Foo::CLI::Commands.register 'console',           Commands::Console
Foo::CLI::Commands.register 'db' do |prefix|
  prefix.register 'apply',   Commands::DB::Apply
  prefix.register 'console', Commands::DB::Console
  prefix.register 'create',  Commands::DB::Create
  prefix.register 'drop',    Commands::DB::Drop
  prefix.register 'migrate', Commands::DB::Migrate
  prefix.register 'prepare', Commands::DB::Prepare
  prefix.register 'version', Commands::DB::Version
  prefix.register 'rollback', Commands::DB::Rollback
end
Foo::CLI::Commands.register 'destroy', aliases: ['d'] do |prefix|
  prefix.register 'action',    Commands::Destroy::Action
  prefix.register 'app',       Commands::Destroy::App
  prefix.register 'mailer',    Commands::Destroy::Mailer
  prefix.register 'migration', Commands::Destroy::Migration
  prefix.register 'model',     Commands::Destroy::Model
end
Foo::CLI::Commands.register 'generate', aliases: ['g'] do |prefix|
  prefix.register 'action',    Commands::Generate::Action
  prefix.register 'app',       Commands::Generate::App
  prefix.register 'mailer',    Commands::Generate::Mailer
  prefix.register 'migration', Commands::Generate::Migration
  prefix.register 'model',     Commands::Generate::Model
  prefix.register 'secret',    Commands::Generate::Secret
end
Foo::CLI::Commands.register 'new',     Commands::New
Foo::CLI::Commands.register 'routes',  Commands::Routes
Foo::CLI::Commands.register 'server',  Commands::Server,  aliases: ['s']
Foo::CLI::Commands.register 'version', Commands::Version, aliases: ['v', '-v', '--version']
Foo::CLI::Commands.register 'exec',    Commands::Exec

Foo::CLI::Commands.register 'hello',       Commands::Hello
Foo::CLI::Commands.register 'greeting',    Commands::Greeting
Foo::CLI::Commands.register 'sub command', Commands::Sub::Command

Foo::CLI::Commands.register 'variadic default',                    Commands::VariadicArguments
Foo::CLI::Commands.register 'variadic with-mandatory',             Commands::MandatoryAndVariadicArguments        # rubocop:disable Metrics/LineLength
Foo::CLI::Commands.register 'variadic with-mandatory-and-options', Commands::MandatoryOptionsAndVariadicArguments # rubocop:disable Metrics/LineLength

Foo::CLI::Commands.register 'generate webpack', Webpack::CLI::Generate
Foo::CLI::Commands.register 'hello',            Webpack::CLI::Hello
Foo::CLI::Commands.register 'sub command',      Webpack::CLI::SubCommand
Foo::CLI::Commands.register 'callbacks',        Webpack::CLI::CallbacksCommand

# we need to be sure that command will not override with nil command
Foo::CLI::Commands.register 'generate webpack', nil

Foo::CLI::Commands.before('callbacks') do |args|
  puts "before command callback #{self.class.name} #{args.inspect}"
end

Foo::CLI::Commands.after('callbacks') do |args|
  puts "after command callback #{self.class.name} #{args.inspect}"
end

Foo::CLI::Commands.before('callbacks', Callbacks::BeforeClass)
Foo::CLI::Commands.after('callbacks',  Callbacks::AfterClass)
Foo::CLI::Commands.before('callbacks', Callbacks::Before.new)
Foo::CLI::Commands.after('callbacks',  Callbacks::After.new)

cli = Dry::CLI.new(Foo::CLI::Commands)
cli.call
