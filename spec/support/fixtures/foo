#!/usr/bin/env ruby
$:.unshift __dir__ + '/../../lib'
require 'hanami/cli'
require 'hanami/cli/command'
require 'hanami/cli/command_registry'

module MyCLI
  class Commands
    extend Hanami::Cli::CommandRegistry
  end
end

module Foo
  class Cli
    class Hello < Hanami::Cli::Command
      def call
      end
    end
    MyCLI::Commands.register "hello", Hello

    class Version < Hanami::Cli::Command
      def call
        puts "v1.0.0"
      end
    end
    MyCLI::Commands.register "version", Version, aliases: ["--version", "-v"]

    class Server < Hanami::Cli::Command
      desc 'Starts a hanami server'

      option :port, alias: '-p', desc: 'The port to run the server on'
      option :server
      option :host
      option :code_reloading, type: :boolean, default: true

      def call(options)
        puts "Server: #{options}"
      end
    end
    MyCLI::Commands.register "server", Server

    class New < Hanami::Cli::Command
      desc 'Creates a new hanami project'

      argument :project_name, required: true

      def call(project_name:, **options)
        puts "New: #{options} - project_name: #{project_name}"
      end
    end
    MyCLI::Commands.register "new", New

    module Destroy
      class Subcommand < Hanami::Cli::Command
        desc 'Destroy hanami classes'
      end
      MyCLI::Commands.register 'destroy', Subcommand, subcommand: true

      class Action < Hanami::Cli::Command
        argument :application_name, required: true
        argument :controller_name__action_name, required: true, label: "CONTROLLER_NAME#ACTION_NAME"
        option :url
        option :skip_view, type: :boolean, default: false

        def call(application_name:, controller_name__action_name:, **options)
          puts "destroy action: #{options} - application_name: #{application_name} - controller_name__action_name: #{controller_name__action_name}"
        end
      end
      MyCLI::Commands.register "destroy action", Action
    end

    module Generate
      class Subcommand < Hanami::Cli::Command
        desc 'Generate hanami classes'
      end
      MyCLI::Commands.register 'generate', Subcommand, subcommand: true

      class Model < Hanami::Cli::Command
        desc 'Generate an entity'

        argument :model_name, required: true
        option :name, alias: '-n', desc: 'use the name for generating the model'

        def call(model_name:, **options)
          puts "generated model: #{options} - model_name: #{model_name}"
        end
      end
      MyCLI::Commands.register "generate model", Model

      class Secret < Hanami::Cli::Command
        argument :app

        def call(app:, **options)
          puts "generate secret: - app: #{app}"
        end
      end
      MyCLI::Commands.register "generate secret", Secret

      class Action < Hanami::Cli::Command
        def call
        end
      end
      MyCLI::Commands.register "generate action", Action
    end
  end
end

module Webpack
  module Commands
    class Hi < Hanami::Cli::Command
      def call
        puts "world"
      end
    end
    MyCLI::Commands.register "hello", Hi

    module Generate
      class Configuration < Hanami::Cli::Command
        def call
          puts "generated configuration"
        end
      end
      MyCLI::Commands.register "generate webpack", Configuration

      class Action < Hanami::Cli::Command
        desc 'Generate an action'

        def call
          puts "generated action"
        end
      end
      MyCLI::Commands.register "generate action", Action

      module Application
        class Subcommand < Hanami::Cli::Command
          desc 'Generate hanami applications'
        end
        MyCLI::Commands.register 'generate application', Subcommand, subcommand: true

        class New < Hanami::Cli::Command
          desc 'Generate an application'

          def call(options)
            puts "generated application new: #{options}"
          end
        end
        MyCLI::Commands.register "generate application new", New
      end
    end
  end
end

cli = Hanami::Cli.new(MyCLI::Commands)
cli.call
